<?php
namespace Samurai\Project;

use PHPUnit\Framework\TestCase;
use PHPGit\Git;
use Pimple\Container;
use Puppy\Config\ArrayConfig;
use Puppy\Config\Config;
use Samurai\Alias\AliasManagerFactory;
use Samurai\Module\Module;
use Samurai\Module\Modules;
use Samurai\Samurai;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Helper\HelperSet;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Tester\CommandTester;

/**
 * Class NewCommandTest
 * @package Samurai\Command
 * @author RaphaÃ«l Lefebvre <raphael@raphaellefebvre.be>
 */
class NewCommandTest extends TestCase
{

    /**
     *
     */
    public function testDefault()
    {

        $executor = $this->getMock('TRex\Cli\Executor');
        $executor->expects($this->any())
            ->method('flush')
            ->will($this->returnValue(0));

        $questionHelper = $this->getMock('Symfony\Component\Console\Helper\QuestionHelper', array('ask'));

        $questionHelper->expects($this->at(0))
            ->method('ask')
            ->will($this->returnCallback(function(InputInterface $input, OutputInterface $output, ChoiceQuestion $question){
                $choices = $question->getChoices();
                return current($choices);
            }));

        $questionHelper->expects($this->at(1))
            ->method('ask')
            ->will($this->returnValue('vendor/package')); //set project name

        $questionHelper->expects($this->at(2))
            ->method('ask')
            ->will($this->returnValue('desc')); //set description

        $questionHelper->expects($this->at(3))
            ->method('ask')
            ->will($this->returnValue('')); //ask for hompage

        $questionHelper->expects($this->at(4))
            ->method('ask')
            ->will($this->returnValue('')); //ask for keywords

        $questionHelper->expects($this->at(5))
            ->method('ask')
            ->will($this->returnValue(true)); //confirm git user

        $questionHelper->expects($this->at(6))
            ->method('ask')
            ->will($this->returnValue(false)); //do not add a other user

        $git = $this->getMock('PHPGit\Git', array('config'));
        $git->expects($this->once())
            ->method('config')
            ->will($this->returnValue([
                'user.name' => 'git.name',
                'user.email' => 'git.email@mail.com',
            ]));


        $application = new Application();
        $samurai = new Samurai($application, $this->provideServices($questionHelper, $git, true), $executor);

        $command = $application->find('new');
        $command->getHelperSet()->set($questionHelper, 'question');

        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName()
        ]);

        $this->assertContains('Installing project vendor/package from raphhh/php-lib-bootstrap', $commandTester->getDisplay());
        $this->assertContains('Initializing composer config', $commandTester->getDisplay());
        $this->assertContains("Running 2 module(s)", $commandTester->getDisplay());
        //$this->assertContains("ABB", $commandTester->getDisplay()); todo
        $this->assertRegExp('/Generated by Samurai in \d+\.\d{2} sec. Banzai!/', $commandTester->getDisplay());

        /**
         * @var Project $project
         */
        $project = $samurai->getServices()['project'];
        $this->assertSame('vendor/package', $project->getName());
        $this->assertSame('raphhh/php-lib-bootstrap', $project->getBootstrap()->getPackage());
        $this->assertSame('', $project->getBootstrap()->getVersion());
        $this->assertSame(getcwd() . DIRECTORY_SEPARATOR . 'vendor/package', $project->getDirectoryPath());
        $this->assertSame('desc', $project->getDescription());
        $this->assertSame('', $project->getHomepage());
        $this->assertSame([], $project->getKeywords());
        $this->assertSame('git.name <git.email@mail.com>', (string)$project->getAuthors()[0]);
        $this->assertCount(0, $project->getPackages());
    }

    public function testFilled()
    {
        $executor = $this->getMock('TRex\Cli\Executor');
        $executor->expects($this->any())
            ->method('flush')
            ->will($this->returnValue(0));

        $questionHelper = $this->getMock('Symfony\Component\Console\Helper\QuestionHelper', array('ask'));

        $questionHelper->expects($this->at(0))
            ->method('ask')
            ->will($this->returnValue('vendor/package'));

        $questionHelper->expects($this->at(1))
            ->method('ask')
            ->will($this->returnValue('desc'));

        $questionHelper->expects($this->at(2))
            ->method('ask')
            ->will($this->returnValue('http://website.com'));

        $questionHelper->expects($this->at(3))
            ->method('ask')
            ->will($this->returnValue(' k1 , k2'));

        $questionHelper->expects($this->at(4))
            ->method('ask')
            ->will($this->returnValue(true)); //confirm git user

        $questionHelper->expects($this->at(5))
            ->method('ask')
            ->will($this->returnValue(true)); //add a other user

        $questionHelper->expects($this->at(6))
            ->method('ask')
            ->will($this->returnValue(new Author('add.name <add.email@mail.com>'))); //set author

        $questionHelper->expects($this->at(7))
            ->method('ask')
            ->will($this->returnValue(false)); //do not add a other user

        $questionHelper->expects($this->at(8))
            ->method('ask')
            ->will($this->returnValue(true)); //add a package

        $questionHelper->expects($this->at(9))
            ->method('ask')
            ->will($this->returnValue('vendor\namespace')); //add a namespace

        $questionHelper->expects($this->at(10))
            ->method('ask')
            ->will($this->returnValue('src/,tests/,test/')); //add dirs

        $questionHelper->expects($this->at(11))
            ->method('ask')
            ->will($this->returnValue(false)); //do not add another namespace


        $git = $this->getMock('PHPGit\Git', array('config'));
        $git->expects($this->once())
            ->method('config')
            ->will($this->returnValue([
                'user.name' => 'git.name',
                'user.email' => 'git.email@mail.com',
            ]));

        $application = new Application();
        $samurai = new Samurai($application, $this->provideServices($questionHelper, $git, false), $executor);

        $command = $application->find('new');
        $command->getHelperSet()->set($questionHelper, 'question');

        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),
            'bootstrap' => 'vendor/bootstrap',
            'version' => '1.0.0',
            '--dir' => 'dir/path',
            '--no-module' => true,
        ]);

        $this->assertRegExp('/Installing project vendor\/package from vendor\/bootstrap/', $commandTester->getDisplay());
        $this->assertRegExp('/Initializing composer config/', $commandTester->getDisplay());
        $this->assertNotContains("Running 2 module(s)", $commandTester->getDisplay());
        $this->assertRegExp('/Generated by Samurai in \d+\.\d{2} sec. Banzai!/', $commandTester->getDisplay());

        /**
         * @var Project $project
         */
        $project = $samurai->getServices()['project'];
        $this->assertSame('vendor/package', $project->getName());
        $this->assertSame('vendor/bootstrap', $project->getBootstrap()->getPackage());
        $this->assertSame('1.0.0', $project->getBootstrap()->getVersion());
        $this->assertSame(getcwd() . DIRECTORY_SEPARATOR . 'dir/path', $project->getDirectoryPath());
        $this->assertSame('desc', $project->getDescription());
        $this->assertSame('http://website.com', $project->getHomepage());
        $this->assertSame(['k1', 'k2'], $project->getKeywords());
        $this->assertSame('git.name <git.email@mail.com>', (string)$project->getAuthors()[0]);
        $this->assertSame('add.name <add.email@mail.com>', (string)$project->getAuthors()[1]);
        $this->assertSame('vendor\namespace\\', $project->getPackages()[0]->getNamespace());
        $this->assertSame(['src/','tests/','test/'], $project->getPackages()[0]->getPathList());
    }

    /**
     * @param QuestionHelper $questionHelper
     * @param Git $git
     * @param bool $runModules
     * @return Container
     * @internal param $result
     */
    private function provideServices(QuestionHelper $questionHelper, Git $git, $runModules)
    {
        $composer = $this->provideComposer(0);

        $services = new Container();

        $services['config'] = function () {
            return new Config('');
        };

        $services['project'] = function () {
            return new Project();
        };

        $services['composer'] = function () use ($composer) {
            return $composer;
        };

        $services['helper_set'] = function () use ($questionHelper) {
            return new HelperSet(['question' => $questionHelper]);
        };

        $services['alias_manager'] = function () {
            $factory = new AliasManagerFactory();
            return $factory->createFromConfig(new Config(''));
        };

        $moduleManager = $this->provideModuleManagerForAll($runModules);

        $services['module_manager'] = function() use($moduleManager){
            return $moduleManager;
        };

        $services['git'] = function () use ($git){
            return $git;
        };

        return $services;
    }

    private function provideComposer($result)
    {
        $composer = $this->getMockBuilder('Samurai\Project\Composer\Composer')
            ->disableOriginalConstructor()
            ->getMock();

        $composer->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue([]));

        $composer->expects($this->any())
            ->method('setConfig');

        $composer->expects($this->any())
            ->method('validateConfig')
            ->will($this->returnValue($result));

        $composer->expects($this->any())
            ->method('createProject')
            ->will($this->returnValue($result));

        return $composer;
    }

    /**
     * @param bool $runModules
     * @return \Samurai\Module\ModuleManager
     */
    private function provideModuleManagerForAll($runModules)
    {

        $moduleManager = $this->getMockBuilder('Samurai\Module\ModuleManager')->disableOriginalConstructor()->getMock();

        $moduleManager->expects($this->exactly((int)$runModules))
            ->method('getAll')
            ->will($this->returnValue($this->providesModules()));

        return $moduleManager;
    }

    /**
     * @return Modules
     */
    private function providesModules()
    {
        $modules = new Modules();

        $moduleA = new Module();
        $moduleA->setName('name of A');
        $moduleA->setIsEnable(true);
        $moduleA->setTasks([
            'Samurai\Module\resources\TaskA',
            'Samurai\Module\resources\TaskB',
        ]);
        $modules[] = $moduleA;

        $moduleB = new Module();
        $moduleB->setName('name of B');
        $moduleB->setIsEnable(true);
        $moduleB->setTasks([
            'Samurai\Module\resources\TaskB',
        ]);
        $modules[] = $moduleB;

        $moduleC = new Module();
        $moduleC->setName('name of C');
        $moduleC->setTasks([
            'Samurai\Module\resources\TaskC',
        ]);
        $modules[] = $moduleC;

        return $modules;
    }
}
